"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Unit;
(function (Unit) {
    Unit[Unit["one"] = 0] = "one";
    Unit[Unit["ten"] = 1] = "ten";
    Unit[Unit["hundred"] = 2] = "hundred";
    Unit[Unit["thousand"] = 3] = "thousand";
    Unit[Unit["million"] = 6] = "million";
    Unit[Unit["billion"] = 9] = "billion";
    Unit[Unit["trillion"] = 12] = "trillion";
    Unit[Unit["quadrillion"] = 15] = "quadrillion";
    Unit[Unit["quintillion"] = 18] = "quintillion";
    Unit[Unit["sextillion"] = 21] = "sextillion";
    Unit[Unit["septillion"] = 24] = "septillion";
    Unit[Unit["octillion"] = 27] = "octillion";
    Unit[Unit["nonillion"] = 30] = "nonillion";
    Unit[Unit["decillion"] = 33] = "decillion";
    Unit[Unit["undecillion"] = 36] = "undecillion";
    Unit[Unit["duodecillion"] = 39] = "duodecillion";
    Unit[Unit["tredecillion"] = 42] = "tredecillion";
    Unit[Unit["quattuordecillion"] = 45] = "quattuordecillion";
    Unit[Unit["quindecillion"] = 48] = "quindecillion";
    Unit[Unit["sexdecillion"] = 51] = "sexdecillion";
    Unit[Unit["septendecillion"] = 54] = "septendecillion";
    Unit[Unit["octodecillion"] = 57] = "octodecillion";
    Unit[Unit["novemdecillion"] = 60] = "novemdecillion";
    Unit[Unit["vigintillion"] = 63] = "vigintillion";
})(Unit || (Unit = {}));
var UnitAbbreviation;
(function (UnitAbbreviation) {
    UnitAbbreviation[UnitAbbreviation["O"] = 0] = "O";
    UnitAbbreviation[UnitAbbreviation["T"] = 1] = "T";
    UnitAbbreviation[UnitAbbreviation["H"] = 2] = "H";
    UnitAbbreviation[UnitAbbreviation["K"] = 3] = "K";
    UnitAbbreviation[UnitAbbreviation["M"] = 6] = "M";
    UnitAbbreviation[UnitAbbreviation["B"] = 9] = "B";
    UnitAbbreviation[UnitAbbreviation["Tr"] = 12] = "Tr";
    UnitAbbreviation[UnitAbbreviation["Qd"] = 15] = "Qd";
    UnitAbbreviation[UnitAbbreviation["Qt"] = 18] = "Qt";
    UnitAbbreviation[UnitAbbreviation["Sxt"] = 21] = "Sxt";
    UnitAbbreviation[UnitAbbreviation["Spt"] = 24] = "Spt";
    UnitAbbreviation[UnitAbbreviation["Ot"] = 27] = "Ot";
    UnitAbbreviation[UnitAbbreviation["Nn"] = 30] = "Nn";
    UnitAbbreviation[UnitAbbreviation["Dc"] = 33] = "Dc";
    UnitAbbreviation[UnitAbbreviation["Ud"] = 36] = "Ud";
    UnitAbbreviation[UnitAbbreviation["Dd"] = 39] = "Dd";
    UnitAbbreviation[UnitAbbreviation["Td"] = 42] = "Td";
    UnitAbbreviation[UnitAbbreviation["Qtd"] = 45] = "Qtd";
    UnitAbbreviation[UnitAbbreviation["Qnd"] = 48] = "Qnd";
    UnitAbbreviation[UnitAbbreviation["Sxd"] = 51] = "Sxd";
    UnitAbbreviation[UnitAbbreviation["Std"] = 54] = "Std";
    UnitAbbreviation[UnitAbbreviation["Od"] = 57] = "Od";
    UnitAbbreviation[UnitAbbreviation["Nd"] = 60] = "Nd";
    UnitAbbreviation[UnitAbbreviation["V"] = 63] = "V";
})(UnitAbbreviation || (UnitAbbreviation = {}));
function unitNameFromNumber(number) {
    const power = getUnitPower(number);
    return Unit[power];
}
exports.unitNameFromNumber = unitNameFromNumber;
function numberFromUnitName(name, raw) {
    const power = Unit[name.toLowerCase()];
    const unitNumber = Math.pow(10, power);
    const isScientific = new RegExp(/e\+\d+$/).test(unitNumber.toString());
    if (raw && isScientific) {
        let string = "1";
        const power = parseInt(unitNumber.toString().split("+")[1]);
        for (let i = 0; i < power; i++) {
            string += "0";
        }
        return string;
    }
    else if (raw) {
        return unitNumber.toString();
    }
    else {
        return unitNumber;
    }
}
exports.numberFromUnitName = numberFromUnitName;
function trimName(name) {
    const power = Unit[name];
    return UnitAbbreviation[power];
}
exports.trimName = trimName;
function trimNumber(number) {
    const power = getPower(number);
    const base = Math.round(Math.max(power, 1));
    const value = power > 3
        ? Math.floor(power / 3) * 3
        : Math.round(power / base) * base;
    return Math.floor(number / eval(`1e+${value}`));
}
exports.trimNumber = trimNumber;
function getUnitPower(number) {
    const power = Math.fround(getPower(number));
    const base = Math.floor(Math.max(power, 1));
    const value = power > 3
        ? Math.floor(power / 3) * 3
        : Math.floor(power / base) * base;
    return value;
}
exports.getUnitPower = getUnitPower;
function getPower(number, round) {
    const target = Math.max(number, 1);
    return round
        ? Math.round(Math.log(target) / Math.log(10))
        : Math.log(target) / Math.log(10);
}
exports.getPower = getPower;
