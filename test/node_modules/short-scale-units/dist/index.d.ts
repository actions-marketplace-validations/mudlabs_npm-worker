/**
 * Provides the English unit name for the given number.
 * @param number The number you want to match a unit to.
 * @returns The matched unit name.
 */
export declare function unitNameFromNumber(number: number): string;
/**
 * Provides the base unit number for the given unit name.
 * @param name The unit name you want the base number of.
 * @param raw Specify `true` if you want the **raw unit integer**. Otherwise large numbers will be in scientific notation `1e+X`.
 * @returns The unit value as a `number`, or a `string` if `raw` was specified true.
 */
export declare function numberFromUnitName(name: string, raw?: boolean): number | string;
/**
 * Provides an abbreviation of the short unit name;
 * @param name The full unit name.
 * @returns The abbreviated unit name.
 */
export declare function trimName(name: string): string;
/**
 * Provides the short-hand abbreviation of a number, relative to its unit.
 * @param number The number you want abbreviated to its unit value.
 * @returns The shortend number.
 */
export declare function trimNumber(number: number): number;
/**
 * Provides the power for the given number, relative to its unit.
 * - If you want the real power see `getPower`.
 * @param number The number for which you want the unit power.
 * @returns The numbers unit power.
 */
export declare function getUnitPower(number: number): number;
/**
 * Provides the power for the given number.
 * - If you want the power relative to its unit use `getUnitPower`.
 * @param number The number for which you want the power.
 * @param round A boolean specifing the power should be rounded.
 * @returns The numbers power
 */
export declare function getPower(number: number, round?: boolean): number;
